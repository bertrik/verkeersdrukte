plugins {
    alias(libs.plugins.dependencycheck)
    alias(libs.plugins.errorprone)
    alias(libs.plugins.versions)
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyCheck {
    scanConfigurations = ['runtimeClasspath']
}

// Disable parallel execution only when running dependencyUpdates
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":dependencyUpdates")) {
        gradle.startParameter.parallelProjectExecutionEnabled = false
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    plugins.apply("java")
    plugins.apply("com.github.ben-manes.versions")
    plugins.apply("net.ltgt.errorprone")

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    dependencies {
        errorprone(libs.errorprone.core)
        compileOnly(libs.errorprone.annotations)

        testImplementation(platform(libs.junit.bom))
        testImplementation(libs.junit.jupiter)
        testRuntimeOnly(libs.junit.platform.launcher)
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }

    tasks.withType(Tar).configureEach {
        preserveFileTimestamps = true
    }

    tasks.named("dependencyUpdates").configure {
        rejectVersionIf { isNonStable(it.candidate.version) }
    }
}
